name: Build and Push Docker Image 📦🐳

on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  pull_request:
    branches:
      - main
    types:
      - labeled

env:
  REGISTRY_IMAGE: cloudmedix/api-gateway
  GHCR_IMAGE: fis2425/api-gateway
  PR_ID: ${{ github.event.pull_request.number }}
  TAG: ${{ github.ref_name }}
  DOCKER_BUILD_RECORD_UPLOAD: false

defaults:
  run:
    shell: bash

jobs:
  docker_inputs:
    name: Prepare Docker build variables 🏷️🐳
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ env.tags }}
      platforms: ${{ env.platforms }}
      caches: ${{ env.caches }}
    steps:
      - name: Generate tags 🏷️
        run: |
          TG+='${{ startsWith(github.ref, 'refs/tags/') && format('{0}:{1}', env.REGISTRY_IMAGE, env.TAG) || '' }}\n'
          TG+='${{ github.ref == 'refs/heads/main' && format('{0}:latest', env.REGISTRY_IMAGE) || '' }}\n'
          TG+='${{ github.event_name == 'pull_request' && format('{0}:PR.{1}', env.REGISTRY_IMAGE, env.PR_ID) || '' }}\n'
          TG+='${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}:{1}', env.GHCR_IMAGE, env.TAG) || '' }}\n'
          TG+='${{ github.ref == 'refs/heads/main' && format('ghcr.io/{0}:latest', env.GHCR_IMAGE) || '' }}\n'
          TG+='${{ github.event_name == 'pull_request' && format('ghcr.io/{0}:PR.{1}', env.GHCR_IMAGE, env.PR_ID) || '' }}'
          echo "tags<<EOF" >> $GITHUB_ENV
          echo -e "$TG" | tr -s '\n' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate platform array 🖥️📝
        run: |
          PARSED_ARRAY=$(echo '["amd64", "arm64"]' | jq '. | map("linux/" + .) | .[]' | tr -d '"')
          echo "platforms<<EOF" >> $GITHUB_ENV
          echo "$PARSED_ARRAY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate cache array 💾📝
        run: |
          PARSED_ARRAY=$(echo '["amd64", "arm64"]' | jq '. | map("type=local,mode=min,src=/tmp/${{ env.REGISTRY_IMAGE }}/cache/buildx-" + .) | .[]' | tr -d '"')
          echo "caches<<EOF" >> $GITHUB_ENV
          echo "$PARSED_ARRAY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  docker_build:
    name: Docker image for ${{ matrix.platform }} 💿🐳
    needs:
      - docker_inputs
    runs-on: 'ubuntu-latest'
    if: (github.event.pull_request && github.event.label.name == '🐳 Dockerize')  || github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson('["amd64", "arm64"]') }}
    
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v4.2.2
        with:
          show-progress: false

      - name: Copy Config File 📄
        run: cp config.yaml.example config.yaml

      - name: Configure QEMU ⚙️
        uses: docker/setup-qemu-action@v3.2.0

      - name: Configure Docker Buildx ⚙️
        uses: docker/setup-buildx-action@v3.7.1

      - name: Build images 🛠️
        uses: docker/build-push-action@v6.9.0
        id: image
        with:
          context: .
          file: Dockerfile
          platforms: ${{ format('linux/{0}', matrix.platform) }}
          cache-from: |
            type=gha,scope=buildx-${{ matrix.platform }}
          cache-to: |
            type=local,mode=min,dest=/tmp/${{ env.REGISTRY_IMAGE }}/cache/${{ matrix.platform }}
            type=gha,mode=min,ignore-error=true,scope=buildx-${{ matrix.platform }}
          outputs: type=docker,dest=docker_image.tar
          tags: |
            ${{ needs.docker_inputs.outputs.tags }}
      
      - name: Upload Docker image as artifact ⬆️📦
        uses: actions/upload-artifact@v4.4.3
        with:
          compression-level: 0
          name: docker_image-linux_${{ matrix.platform }}
          path: docker_image.tar
      
      - name: Create provenance attestation 🔏
        uses: actions/attest-build-provenance@v1.4.4
        continue-on-error: true
        with:
          subject-path: docker_image.tar
      
      - name: Upload cache artifact ⬆️⚙️
        uses: actions/upload-artifact@v4.4.3
        with:
          compression-level: 0
          name: buildx-${{ matrix.platform }}
          path: |
            /tmp/${{ env.REGISTRY_IMAGE }}/cache/${{ matrix.platform }}

  docker_merge:
    name: Merge Docker images 💿🐳
    runs-on: 'ubuntu-latest'

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    needs:
      - docker_inputs
      - docker_build
    steps:
      - name: Download cache artifacts 📦⬇️
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: buildx-*
          path: /tmp/${{ env.REGISTRY_IMAGE }}/cache/
  
      - name: Checkout ⬇️
        uses: actions/checkout@v4.2.2
        with:
          show-progress: false

      - name: Configure QEMU ⚙️
        uses: docker/setup-qemu-action@v3.2.0

      - name: Configure Docker Buildx ⚙️
        uses: docker/setup-buildx-action@v3.7.1

      - name: Login to DockerHub 🔑
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry 🔑
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multiplatform image ${{ inputs.push && 'and push 🛠️⬆️' || '🛠️' }} 
        uses: docker/build-push-action@v6.9.0
        id: image
        with:
          context: .
          file: Dockerfile
          push: true
          provenance: mode=max
          sbom: true
          cache-from: |
            ${{ needs.docker_inputs.outputs.caches }}
          platforms: |
            ${{ needs.docker_inputs.outputs.platforms }}
          tags: |
            ${{ needs.docker_inputs.outputs.tags }}

      - name: Remove cache artifacts 🗑️
        uses: geekyeggo/delete-artifact@v5.1.0
        with:
          name: |
            buildx-*