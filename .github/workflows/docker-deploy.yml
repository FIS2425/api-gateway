name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  pull_request:
    branches:
      - main
    types:
      - labeled

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKER_USERNAME }}/api-gateway
  GHCR_IMAGE: fis2425/api-gateway
  PR_ID: ${{ github.event.pull_request.number }}
  TAG: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: (github.event.pull_request && github.event.label.name == '🐳 Dockerize')  || github.event_name == 'push'

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v4.2.2
        with:
          show-progress: false

      - name: Copy Config File 📄
        run: cp config.yaml.example config.yaml

      - name: Set up QEMU 🏗️
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64

      - name: Set up Docker Buildx 🐳
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub 🔑
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry 🔑
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: install Rust Toolchain 🦀
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          targets: |
            x86_64-unknown-linux-gnu
            aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools 🛠️
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu \
            gcc-x86-64-linux-gnu \
            libssl-dev \
            pkg-config

      - name: Install Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Setup Rust cache 📦
        uses: Swatinem/rust-cache@v2

      - name: Build release artifacts for multiple architectures 🚀
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cargo build --release --target aarch64-unknown-linux-gnu

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
